
function add(a, b, callback) {
    var result = a +b;
    callback(result);
}

// function resultFunc(result) {
//     console.log("Result = %d", result);
// }
// 단순출력 기능을 add함수에 전달하기 위해 새로운 함수를 따로 설정하여 만든 경우
// ---> 무명함수를 사용하여 add함수에서 바로 출력기능을 구현할 수 있다.  

// add(10, 10, resultFunc(result));

add(10, 10, function(result) { console.log("Result = %d", result); });


// 무명함수를 이용한 체인식 설계: 무명함수를 매개변수로 사용하기 + 함수호출 후 함수호출 후 함수호출 방식 구현//
// 사용자에게 절차적으로 연결된 일련의 입력과정을 요구할 때 사용(?)
// ex) 로그인 -> 로그인 데이터를 '바탕으로' 회원가입 요구 -> '회원가입 데이터'를 바탕으로 다른 함수를 호출하는
add(10, 10, function(result) { 
    console.log("Result = %d", result);

    add(5,5, function(result){ console.log("Result = %d", result);

    });
});


/*코루틴을 사용하는 이유
1. 사용자가 제어권을 가진상태에서 분산처리함 
하나의 함수에서 처리 시간이 오래 걸릴 경우 
 -> 중간중간 yield return을 통해 실행권한을 분산시켜 프로그램의 흐름이 끊이지 않도록 한다
 2. 프로그램을 향해 무한 루프를 걸 때
 
 단점: 모든 연산이 끝나고 변수에 값을 집어넣어 주려고 할 때 
 만약 연산 중 코루틴에 의해 권한이 넘어간다면 연산이 완료되지 못하고 의도하지 않은 엉뚱한 값이 변수에 넣어질 수 있다

 해결: 함수자체를 매개변수로 넣어준다면(함수형태로 전달하기) 함수의 연산을 보장해줄 수 있다 // 의도한 값을 안전하게 넣어줄 수 있다!!!
 
 
 4. 델리게이트도 동일한 원리?
 함수를 '참조'하게끔 도와주는 대리자
 서로 연관이 없는 객체 a와 b에 대해 서로의 기능을 전달하고 싶을 때 사용한다
 예를 들어 b라는 이름의 button이 있다면 어떤 기능을 주고 싶을까?
 a라는 객체가 만약 색깔을 바꿀 수 있는 기능을 갖고 있다면 다른 객체에 이 기능을 어떻게 심어줄 수 있는지 생각해보자

 1. 값을 넣어주기
 변수에 값을 넣어 그 변수를 전달하는 방법이 있음
 2. 함수를 넣어주기? 전달하기?
 함수 자체를 델리게이트를 통해 전달시켜 기능을 사용할 수 있도록 한다?
 */